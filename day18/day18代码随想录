513
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int res = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                TreeNode node = queue.poll();
                if(i==0){
                    res = node.val;
                }
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
        }
        return res;
    }
}
class Solution {
    int res;
    int maxDepth;
    public int findBottomLeftValue(TreeNode root) {
        res = root.val;
        maxDepth = -1;
        helper(0,root);
        return res;
    }
    private void helper(int depth,TreeNode node){
        if(node==null) return;
        if(node.left==null&&node.right==null){
            if(depth>maxDepth){
                maxDepth = depth;
                res = node.val;
            }
            return;
        }
        if(node.left!=null){
            helper(depth+1,node.left);
        }
        if(node.right!=null){
            helper(depth+1,node.right);
        }
    }
}
112
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null) return false;
        return helper(root,targetSum,0);
    }
    private boolean helper(TreeNode node,int targetSum, int sum){
        if(node==null) return false;
        if(node.left==null&&node.right==null&&node.val+sum==targetSum) return true;
        boolean left = helper(node.left,targetSum,sum+node.val);
        boolean right = helper(node.right,targetSum,sum+node.val);
        return left||right;
    }
}
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null) return false;
        Queue<Pair<TreeNode,Integer>> queue = new LinkedList<>();
        queue.offer(new Pair(root,root.val));
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                Pair<TreeNode,Integer> pair = queue.poll();
                TreeNode node = pair.getKey();
                if(node.left==null&&node.right==null&&pair.getValue()==targetSum) return true;
                if(node.left!=null){
                    queue.offer(new Pair(node.left,pair.getValue()+node.left.val));
                }
                if(node.right!=null){
                    queue.offer(new Pair(node.right,pair.getValue()+node.right.val));
                }
            }
        }
        return false;
    }
}
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        helper(res,new ArrayList<>(),root,targetSum,0);
        return res;
    }
    private void helper(List<List<Integer>> res, List<Integer> list,TreeNode node,int targetSum,int sum){
        list.add(node.val);
        if(node.left==null&&node.right==null&&sum+node.val==targetSum){
            res.add(new ArrayList<>(list));
        }
        if(node.left!=null){
            helper(res,list,node.left,targetSum,sum+node.val);
        }
        if(node.right!=null){
            helper(res,list,node.right,targetSum,sum+node.val);
        }    
        list.remove(list.size()-1);

    }
}
105
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTreeHelper(preorder,0,preorder.length-1,inorder,0,inorder.length-1);
    }
    private TreeNode buildTreeHelper(int[] preorder,int st1,int end1,int[] inorder,int st2,int end2){
        if(st1>end1||st2>end2) return null;
        if(st1==end1) return new TreeNode(preorder[st1]);

        TreeNode node = new TreeNode(preorder[st1]);

        int mid = st2;
        for(;mid<=end2;mid++){
            if(inorder[mid]==preorder[st1]) break;
        }
        int leftLen = mid-st2;
        node.left = buildTreeHelper(preorder,st1+1,leftLen+st1,inorder,st2,mid-1);
        node.right = buildTreeHelper(preorder,leftLen+st1+1,end1,inorder,mid+1,end2);
        return node;
    }
}

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return buildTreeHelper(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }
    private TreeNode buildTreeHelper(int[] inorder,int inSt,int inEnd,int[] postorder,int postSt,int postEnd){
        if(inSt>inEnd||postSt>postEnd) return null;
        if(inSt==inEnd) return new TreeNode(inorder[inEnd]);
        int mid = inSt;
        for(;mid<=inEnd;mid++){
            if(inorder[mid]==postorder[postEnd]){
                break;
            }
        }
        TreeNode node = new TreeNode(postorder[postEnd]);
        int leftLen = mid-inSt;
        node.left = buildTreeHelper(inorder,inSt,mid-1,postorder,postSt,postSt+leftLen-1);
        node.right = buildTreeHelper(inorder,mid+1,inEnd,postorder,postSt+leftLen,postEnd-1);
        return node;
    }
}
