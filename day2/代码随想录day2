class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int l = 0,r = 0;
        int sum = 0;
        int len = Integer.MAX_VALUE;
        while(r<nums.length){
            sum += nums[r];
            while(sum>=target){
                len = Math.min(len,r-l+1);
                sum -= nums[l++];
            }
            r++;
        }
        return len == Integer.MAX_VALUE ? 0 : len;
    }
}
class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] res = new int[nums.length];
        int l = 0,r = nums.length-1;
        int index = nums.length-1;
        while(l<=r){
            if(Math.abs(nums[l])>Math.abs(nums[r])){
                res[index--] = nums[l]*nums[l];
                l++;
            }else{
                res[index--] = nums[r]*nums[r];
                r--;
            }
        }
        return res;

    }
}
class Solution {
    public int[][] generateMatrix(int n) {
        int colSt = 0, colEnd = n-1;
        int rowSt = 0, rowEnd = n-1;
        int k = 1;
        int[][] res = new int[n][n];
        while(colSt<=colEnd&&rowSt<=rowEnd){
            for(int i = colSt;i<=colEnd;i++){
                res[rowSt][i] = k++;
            }
            rowSt++;
            for(int i = rowSt;i<=rowEnd;i++){
                res[i][colEnd] = k++;
            }
            colEnd--;
            for(int i = colEnd;i>=colSt;i--){
                res[rowEnd][i] = k++;
            }
            rowEnd--;
        
            for(int i = rowEnd;i>=rowSt;i--){
                res[i][colSt] = k++;
            }
            colSt++;
             
        }
        return res;
    }
}
