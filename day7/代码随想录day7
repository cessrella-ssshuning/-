class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        Map<Integer,Integer> map = new HashMap<>();
        int res = 0;
        for(int i = 0;i<nums1.length;i++){
            for(int j = 0;j<nums2.length;j++){
                map.put(nums1[i]+nums2[j],map.getOrDefault(nums1[i]+nums2[j],0)+1);
            }
        }
        for(int i = 0;i<nums3.length;i++){
            for(int j = 0;j<nums4.length;j++){
                if(map.containsKey(0-nums3[i]-nums4[j])){
                    res+=map.get(0-nums3[i]-nums4[j]);
                }
            }
        }
        return res;
    }
}
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] count = new int[26];
        for(int i = 0;i<magazine.length();i++){
            char c = magazine.charAt(i);
            count[c-'a']++;
        }
        for(int i = 0;i<ransomNote.length();i++){
            char c = ransomNote.charAt(i);
            if(count[c-'a']==0) return false;
            count[c-'a']--;
        }
        return true;
    }
}
class Solution {
    /*
    -4,-1,-1,0,1,2
    */
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0;i<nums.length;i++){
            if(i-1>0&&nums[i]==nums[i-1]) continue;
            int l = i+1;
            int r = nums.length-1;
            while(l<r){
                if(nums[i]+nums[l]+nums[r]==0){
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[l]);
                    list.add(nums[r]);
                    res.add(list);
                    while(l-1>0&&nums[l]==nums[l+1]) l++;
                    while(r-1>l&&nums[r]==nums[r-1]) r--;
                    l++;
                    r--;
                }else if(nums[i]+nums[l]+nums[r]<0){
                    l++;
                }else{
                    r--;
                }
            }
        }
        return res;
    }
}
class Solution {
    /*
    因为i和j都会变化，所以nums[i],nums[j]的值不能固定地存下来
    */
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0;i<nums.length;i++){
            if( nums[i]>0&&nums[i]>target) return res;
            if(i>0&&nums[i]==nums[i-1]) continue;
            for(int j = i+1;j<nums.length;j++){
                if(j>i+1&&nums[j]==nums[j-1]) continue;
                int st = j+1, end = nums.length-1;
                while(st<end){
                    long sum = (long)nums[i]+nums[j]+nums[st]+nums[end];
                    if(sum<target){
                        st++;
                    }else if(sum>target){
                        end--;
                    }else{
                        res.add(Arrays.asList(nums[i],nums[j],nums[st],nums[end]));
                        while(st+1<end&&nums[st]==nums[st+1]) st++;
                        while(st<end-1&&nums[end]==nums[end-1]) end--;
                        st++;
                        end--;
                    }
                }
            }
        }
        return res;
    }
}
