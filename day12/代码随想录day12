class Solution {
    /*
    [1,3,-1,-3,5,3,6,7]
    stack(5,3,)
    */
    public int[] maxSlidingWindow(int[] nums, int k) {
        Deque<Integer> dq = new ArrayDeque<>();
        int[] res = new int[nums.length-k+1];
        int j = 0;
        for(int i = 0;i<nums.length;i++){
            while(dq.size()>0&&nums[i]>nums[dq.getLast()]){
                dq.pollLast();
            }
            dq.offer(i);
            while(dq.size()>0&&i-dq.getFirst()>=k){
                dq.pollFirst();
            }
            if(i>=k-1){
                res[j++] = nums[dq.getFirst()];
            }
        }
        return res;
    }
}

class Solution {
    int[][] arr;
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        arr = new int[map.size()][2];
        int index = 0;
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            arr[index][0] = entry.getKey();
            arr[index++][1] = entry.getValue();
        }
        List<Integer> resList = new ArrayList<>();
        int f = quickSelect(0,arr.length-1,k);
        for(int i = 0;i<arr.length;i++){
            if(arr[i][1]>=f){
                resList.add(arr[i][0]);
            }
        }
        int[] res = new int[resList.size()];
        for(int i = 0;i<res.length;i++){
            res[i] = resList.get(i);
        }
        return res;
    }
    private int quickSelect(int a,int b,int k){
        int i = a,t = i,j = b;
        int pivot = arr[(a+b)/2][1];
        while(t<=j){
            if(arr[t][1]<pivot){
                swap(arr,i,t);
                i++;
                t++;
            }else if(arr[t][1]>pivot){
                swap(arr,j,t);
                j--;
            }else{
                t++;
            }
        }
        if(b-j>=k){
            return quickSelect(j+1,b,k);
        }else if(b-i+1>=k){
            return pivot;
        }else {
            return quickSelect(a,i-1,k-(b-i+1));
        }
    }
    private void swap(int[][] arr,int i,int j){
        int[] tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}
