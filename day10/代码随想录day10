class MyQueue {
    Deque<Integer> A;
    Deque<Integer> B;
    public MyQueue() {
        A = new ArrayDeque<>();
        B = new ArrayDeque<>();
        
    }
    
    public void push(int x) {
        A.push(x);
    }
    
    public int pop() {
        if(B.isEmpty()){
            while(!A.isEmpty()){
                B.push(A.pop());
            }
        } 
        return B.pop(); 
    }
    
    public int peek() {
        if(B.isEmpty()){
            while(!A.isEmpty()){
                B.push(A.pop());
            }
        } 
        return B.peek();
    }
    
    public boolean empty() {
        return A.isEmpty()&&B.isEmpty();
    }
}

class MyStack {
    
    Deque<Integer> A;

    public MyStack() {
        A = new ArrayDeque<>();
    }
    
    public void push(int x) {
        A.offer(x);
        int size = A.size();
        while(size>1){
            A.offer(A.poll());
            size--;
        }
    }
    
    public int pop() {
        return A.poll();         
    }
    
    public int top() {
        return A.getFirst();
    }
    
    public boolean empty() {
        return A.isEmpty();
    }
}
