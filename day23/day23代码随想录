669
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root==null) return null;
        if(root.val<low){
            TreeNode right = trimBST(root.right,low,high);
            return right;
        }else if(root.val>high){
            TreeNode left = trimBST(root.left,low,high);
            return left;
        }
        root.left = trimBST(root.left,low,high);
        root.right = trimBST(root.right,low,high);
        return root;
    }
}
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root==null){
            return null;
        }
        while(root!=null&&(root.val<low||root.val>high)){
            if(root.val<low){
                root = root.right;
            }else{
                root = root.left;
            }
        }
        TreeNode curr = root;
        while(curr!=null){
            while(curr.right!=null&&curr.right.val>high){
                curr.right = curr.right.left;
            }
            curr = curr.right;
        }
        curr = root;
        
        return root;
    }
}
  
108
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return helper(nums,0,nums.length-1);
    }
    private TreeNode helper(int[] nums,int st,int end){
        if(st>end) return null;
        int mid = st+(end-st)/2;
        TreeNode node = new TreeNode(nums[mid]);
        node.left = helper(nums,st,mid-1);
        node.right = helper(nums,mid+1,end);
        return node;
    }
}
538
class Solution {
    int prev = 0;
    public TreeNode convertBST(TreeNode root) {
        if(root==null) return null;
        Deque<TreeNode> dq = new ArrayDeque<>();
        TreeNode cur = root;
        while(!dq.isEmpty()||cur!=null){
            while(cur!=null){
                dq.push(cur);
                cur = cur.right;        
            }
            TreeNode node = dq.pop();
            node.val += prev;
            prev = node.val;
            cur = node.left;
        }
        return root;
    }
}
class Solution {
    int prev = 0;
    public TreeNode convertBST(TreeNode root) {
        if(root==null) return null;
        convertBST(root.right);
        root.val += prev;
        prev = root.val;
        convertBST(root.left);
        return root;
    }
}
