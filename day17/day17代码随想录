110
class Solution {
    public boolean isBalanced(TreeNode root) {
        return getHeight(root)!=-1;
    }
    private int getHeight(TreeNode node){
        if(node==null) return 0;
        int left = getHeight(node.left);
        int right = getHeight(node.right);
        if(Math.abs(left-right)>1) return -1;
        if(left==-1||right==-1) return -1;
        return Math.max(left,right)+1;
    }
}

257
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<>();
        helper(root,list,"");
        return list;
    }
    private void helper(TreeNode root,List<String> list,String s){
        if(root==null){
            return;
        }
        //单独处理最后这个节点 就不用加->
        if(root.left==null&&root.right==null){
            list.add(s+root.val);
            return;
        }
        helper(root.left,list,s+root.val+"->");
        helper(root.right,list,s+root.val+"->");
    }
}

404
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null) return 0;
        int sum = 0;

        if(root.left!=null&&root.left.left==null&&root.left.right==null){
            sum += root.left.val;
        }
        sum += sumOfLeftLeaves(root.left);
        sum += sumOfLeftLeaves(root.right);
        return sum;
    }
}

class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null) return 0;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        int result = 0;
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            if(node.left!=null&&node.left.left==null&&node.left.right==null){
                result += node.left.val;
            }
            if(node.left!=null) stack.push(node.left);
            if(node.right!=null) stack.push(node.right);

        }
        return result;
    }
}
