102
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        helper(res,0,root);
        return res;
    }
    private void helper(List<List<Integer>> res, int level,TreeNode node){
        if(node==null) return;
        if(res.size()==level){
            List<Integer> list = new ArrayList<>();
            res.add(list);
        }
        res.get(level).add(node.val);
        helper(res,level+1,node.left);
        helper(res,level+1,node.right);

    }
}
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root==null) return res;
        queue.offer(root);
        while(!queue.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int size = queue.size();
            for(int i = 0;i<size;i++){
                TreeNode node = queue.poll();
                list.add(node.val);
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
            
            res.add(list);
        }
        return res;
    }
}
107
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        helper(res,0,root);
        return res;
    }
    private void helper(List<List<Integer>> res,int level,TreeNode node){
        if(node==null) return;
        if(res.size()==level){
            List<Integer> list = new ArrayList<>();
            res.addFirst(list);
        }
      //  System.out.println(level);
        res.get(res.size()-level-1).add(node.val);
        helper(res,level+1,node.left);
        helper(res,level+1,node.right);
    }
}
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root==null) return res;
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            for(int i = 0;i<size;i++){
                TreeNode node = queue.poll();
                list.add(node.val);
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
            res.addFirst(list);
        }
        return res;
    }
}

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root==null) return list;
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size;i++){
                TreeNode node = queue.poll();
                if(i==size-1){
                    list.add(node.val);
                }
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
        }
        return list;
    }
}
637
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            double sum = 0.0;
            for(int i = 0;i<size;i++){
                TreeNode node = queue.poll();
                sum += node.val;
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
            sum = sum/(size*1.0);
            list.add(sum);
        }
        return list;
    }
}
429
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root==null) return res;
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            for(int i = 0;i<size;i++){
                Node node = queue.poll();
                list.add(node.val);
                for(Node n:node.children){
                    queue.offer(n);
                }
            }
            res.add(list);
        }
        return res;
    }
}
515
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null) return list;
        helper(list,0,root);
        return list;
    }
    private void helper(List<Integer> list,int level,TreeNode node){
        if(node==null) return;
        if(level==list.size()){
            list.add(node.val);
        }else{
            int max = Math.max(node.val,list.get(level));
            list.set(level,max);
        }
        helper(list,level+1,node.left);
        helper(list,level+1,node.right);
    }
}
116
class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size-1;i++){
                Node n1 = queue.poll();
                Node n2 = queue.peek();
                n1.next = n2;
                if(n1.left!=null) queue.offer(n1.left);
                if(n1.right!=null) queue.offer(n1.right);
            }
            Node last = queue.poll();
            last.next = null;
            if(last.left!=null) queue.offer(last.left);
            if(last.right!=null) queue.offer(last.right);
        }
        return root;
    }
}
class Solution {
    public Node connect(Node node) {
        if(node==null) return null;
        if(node.left!=null) node.left.next = node.right;
        if(node.right!=null&&node.next!=null) node.right.next = node.next.left;
        connect(node.left);
        connect(node.right);
        return node;
    }
}
117
class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0;i<size-1;i++){
                Node n1 = queue.poll();
                Node n2 = queue.peek();
                n1.next = n2;
                if(n1.left!=null) queue.offer(n1.left);
                if(n1.right!=null) queue.offer(n1.right);
            }
            Node last = queue.poll();
            if(last.left!=null) queue.offer(last.left);
            if(last.right!=null) queue.offer(last.right);
        }
        return root;
    }
}
class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        Node dummy = new Node(0);
        Node cur = dummy;
        Node real_root = root;
        while(root!=null){
            if(root.left!=null){
                cur.next = root.left;
                cur = cur.next;
            }
            if(root.right!=null){
                cur.next = root.right;
                cur = cur.next;
            }
            root = root.next;
            if(root==null){
                cur = dummy;
                root = cur.next;
                dummy.next = null;
            }
        }
        return real_root;
    }
}
104
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null&&root.right==null) return 1;
        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }
}
111
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null&&root.right==null) return 1;
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        if(left==0){
            left = Integer.MAX_VALUE;
        }
        if(right==0){
            right = Integer.MAX_VALUE;
        }
        return Math.min(left,right)+1;
    }
}
226
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null) return root;
        TreeNode tmp = root.left;
        root.left = root.right;
        root.right = tmp;
        invertTree(root.left);
        invertTree(root.right);
        return root;
    }
}
101
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return helper(root.left,root.right);    
    }
    private boolean helper(TreeNode l,TreeNode r){
        if(l==null&&r==null) return true;
        if(l==null||r==null||l.val!=r.val) return false;
        return helper(l.left,r.right)&&helper(l.right,r.left);
    }
}
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root.left);
        queue.offer(root.right);
        while(!queue.isEmpty()){
            TreeNode l = queue.poll();
            TreeNode r = queue.poll();
            if(l==null&&r==null) continue;
            if(l==null||r==null||l.val!=r.val) return false;
            queue.offer(l.left);
            queue.offer(r.right);
            queue.offer(l.right);
            queue.offer(r.left);
        }
        return true;
    }
}

