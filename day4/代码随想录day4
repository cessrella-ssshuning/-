class Solution {
    public ListNode swapPairs(ListNode head) {
         if(head==null) return head;
         ListNode dummy = new ListNode(0);
         dummy.next = head;
         ListNode cur = head;
         ListNode prev = dummy;
         while(cur!=null&&cur.next!=null){
            ListNode next = cur.next;
            cur.next = next.next;
            next.next = prev.next;
            prev.next = next;

            prev = cur;
            cur = cur.next;         
         }
         return dummy.next;
    }
}
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode fast = head, slow = head, prev = dummy;
        while(n>1){
            fast = fast.next;
            n--;
        }
        while(fast.next!=null){
            prev = slow;
            slow = slow.next;
            fast = fast.next;  
        }
        prev.next = slow.next;
        return dummy.next;
    }
}
public class Solution {
    public ListNode getIntersectionNode(ListNode headA,ListNode headB){
        ListNode curA = headA;
        ListNode curB = headB;
        int lenA = 0, lenB = 0;
        while(curA!=0){
            lenA++;
            curA = curA.next;
        }
        while(curB!=0){
            lenB++;
            curB = curB.next;
        }
        curA = headA;
        curB = headB;
        if(lenB>lenA){
            int tmpLen = lenA;
            lenA = lenB;
            lenB = tmpLen;
            ListNode tmpNode = curA;
            curA = curB;
            curB = tmpNode;
        }
        int gap = lenA - lenB;
        while(gap-->0){
            curA = curA.next;
        }
        while(curA!=null){
            if(curA==curB){
                return curA;
            }
            curA = curA.next;
            curB = curB.next;
        }
        return null;
    }
}
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null||head.next==null) return null;

        ListNode fast = head.next.next;
        ListNode slow = head.next;
        while(fast!=slow&&fast!=null&&fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }

        if(fast!=slow) return null;

       fast = head;
        while(fast!=slow){
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
