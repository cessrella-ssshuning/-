654
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return helper(nums,0,nums.length-1);
    }
    private TreeNode helper(int[] nums,int st,int end){
        if(st>end) return null;
        int max = Integer.MIN_VALUE;
        int index = -1;
        for(int i = st;i<=end;i++){
            if(nums[i]>max){
                max = nums[i];
                index = i;
            }
        }
        TreeNode node = new TreeNode(max);
        node.left = helper(nums,st,index-1);
        node.right = helper(nums,index+1,end);
        return node;
    }
}
617
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1==null) return root2;
        if(root2==null) return root1;
        TreeNode node = new TreeNode(root1.val+root2.val);
        node.left = mergeTrees(root1.left,root2.left);
        node.right = mergeTrees(root1.right,root2.right);
        return node;
    }
}
700
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root==null) return null;
        if(val>root.val){
            return searchBST(root.right,val);
        }else if(val<root.val){
            return searchBST(root.left,val);
        }else{
            return root;
        }
    }
}
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        while(root!=null){
            if(val>root.val){
                root = root.right;
            }else if(val<root.val){
                root = root.left;
            }else{
                return root;
            }
        }
        return null;
    }
}
98
class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root,Long.MIN_VALUE,Long.MAX_VALUE);
    }
    private boolean helper(TreeNode node,long min,long max){
        if(node==null) return true;
        if(node.val<=min||node.val>=max) return false;
        boolean left = helper(node.left,min,Math.min(max,node.val));
        boolean right = helper(node.right,Math.max(min,node.val),max);
        return left&&right;
    }
}
class Solution {
    public boolean isValidBST(TreeNode root) {
        Deque<TreeNode> stack = new ArrayDeque<>();
        long prev = Long.MIN_VALUE;
        while(root!=null||!stack.isEmpty()){
            while(root!=null){
                stack.push(root);
                root = root.left;
            }
            TreeNode node = stack.pop();
            if(node.val<=prev) return false;
            prev = node.val;
            root = node.right;
        }
        return true;
    }
}
