class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        int[] count = new int[26];
        for(int i = 0;i<s.length();i++){
            char c = s.charAt(i);
            count[c-'a']++;
        }
        for(int i = 0;i<t.length();i++){
            char c = t.charAt(i);
            if(count[c-'a']==0) return false;
            count[c-'a']--;
        }
        return true;
    }
}
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        List<Integer> list = new ArrayList<>();
        Set<Integer> set = new HashSet<>();
        for(int i = 0;i<nums1.length;i++){
            set.add(nums1[i]);  
        }
        for(int i = 0;i<nums2.length;i++){
            if(set.contains(nums2[i])){
                set.remove(nums2[i]);
                list.add(nums2[i]);
            }
        }
        int[] arr = new int[list.size()];
        for(int i = 0;i<arr.length;i++){
            arr[i] = list.get(i);
        }
        return arr;
    }
}
class Solution {
    public boolean isHappy(int n) {
        Set<Integer> set = new HashSet<>();  
        while(n!=1){
            int sum = 0;
            while(n>0){
                int num = n%10;
                sum += num*num;
                n = n/10;
            }
            if(set.contains(sum)) return false;
            set.add(sum);
            n = sum;
        }
        return true;
    }
}
class Solution {
    /*
    [2,7,11,15]
     
    */
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap<>();
        int[] res = new int[2];
        for(int i = 0;i<nums.length;i++){
            if(map.containsKey(target-nums[i])){
                res[0] = map.get(target-nums[i]);
                res[1] = i;
            }else{
                map.put(nums[i],i);
            }
        }
        return res;
    }
}
